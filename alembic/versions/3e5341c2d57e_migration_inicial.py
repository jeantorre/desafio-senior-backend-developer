"""migration inicial

Revision ID: 3e5341c2d57e
Revises:
Create Date: 2025-05-08 22:36:10.126271

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "3e5341c2d57e"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("dim_usuario")
    op.drop_table("fat_transacao_carteira")
    op.drop_table("dim_transporte")
    op.drop_table("dim_documento")
    op.drop_table("rl_usuario_documento")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "rl_usuario_documento",
        sa.Column(
            "rel_usuario_documento_id",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=False,
            comment="Identificador único da relação.",
        ),
        sa.Column(
            "usuario_id",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=False,
            comment="ID do usuário.",
        ),
        sa.Column(
            "documento_id",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=False,
            comment="ID do documento.",
        ),
        sa.Column(
            "saldo",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=True,
            comment="Quando aplicável, representa o saldo do documento.",
        ),
        sa.Column(
            "data_cadastro",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
            comment="Data e hora do cadastro da relação no sistema.",
        ),
        sa.Column(
            "data_atualizacao",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
            comment="Data e hora da última atualização da relação no sistema.",
        ),
        sa.ForeignKeyConstraint(
            ["documento_id"],
            ["dim_documento.documento_id"],
            name="rl_usuario_documento_documento_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["usuario_id"],
            ["dim_usuario.usuario_id"],
            name="rl_usuario_documento_usuario_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "rel_usuario_documento_id", name="rl_usuario_documento_pkey"
        ),
        comment="Modelo que representa a relação entre usuários e documentos.",
    )
    op.create_table(
        "dim_documento",
        sa.Column(
            "documento_id",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=False,
            comment="Identificador único do documento.",
        ),
        sa.Column(
            "descricao_documento",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="Descrição do documento.",
        ),
        sa.Column(
            "sigla_documento",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="Sigla do documento.",
        ),
        sa.PrimaryKeyConstraint("documento_id", name="dim_documento_pkey"),
        comment="Modelo que representa um documento do sistema.",
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "dim_transporte",
        sa.Column(
            "transporte_id",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=False,
            comment="Identificador único do transporte.",
        ),
        sa.Column(
            "descricao_transporte",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="Descrição do transporte.",
        ),
        sa.Column(
            "valor_passagem",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=True,
            comment="Valor da passagem.",
        ),
        sa.PrimaryKeyConstraint("transporte_id", name="dim_transporte_pkey"),
        comment="Modelo que representa um transporte do sistema.",
    )
    op.create_table(
        "fat_transacao_carteira",
        sa.Column(
            "transacao_id",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=False,
            comment="Identificador único da transação.",
        ),
        sa.Column(
            "usuario_id",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=False,
            comment="ID do usuário.",
        ),
        sa.Column(
            "documento_id",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=False,
            comment="ID do documento.",
        ),
        sa.Column(
            "valor_transacao",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=True,
            comment="Valor da transação.",
        ),
        sa.Column(
            "tipo_transacao",
            postgresql.ENUM("ENTRADA", "SAIDA", "ESTORNO", name="tipotransacao"),
            autoincrement=False,
            nullable=False,
            comment="Tipo de transação.",
        ),
        sa.Column(
            "data_transacao",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
            comment="Data e hora da transação.",
        ),
        sa.ForeignKeyConstraint(
            ["documento_id"],
            ["dim_documento.documento_id"],
            name="fat_transacao_carteira_documento_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["usuario_id"],
            ["dim_usuario.usuario_id"],
            name="fat_transacao_carteira_usuario_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("transacao_id", name="fat_transacao_carteira_pkey"),
        comment="Modelo que representa uma transação de carteira do sistema.",
    )
    op.create_table(
        "dim_usuario",
        sa.Column(
            "usuario_id",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=False,
            comment="Identificador único do usuário.",
        ),
        sa.Column(
            "nome_usuario",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="Nome do usuário.",
        ),
        sa.Column(
            "email_usuario",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="Email do usuário.",
        ),
        sa.Column(
            "senha",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="Hash da senha do usuário.",
        ),
        sa.Column(
            "data_cadastro",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
            comment="Data e hora do cadastro do usuário no sistema.",
        ),
        sa.Column(
            "data_atualizacao",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
            comment="Data e hora da última atualização do usuário no sistema.",
        ),
        sa.PrimaryKeyConstraint("usuario_id", name="dim_usuario_pkey"),
        comment="Modelo que representa um usuário do sistema.",
    )
    # ### end Alembic commands ###
